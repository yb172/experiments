// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wordgen/number.proto

package wordgen

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GenerateNumberReq contains data reuqired or helpful for number generation
type GenerateNumberReq struct {
	Min int32 `protobuf:"varint,1,opt,name=min" json:"min,omitempty"`
	Max int32 `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
}

func (m *GenerateNumberReq) Reset()                    { *m = GenerateNumberReq{} }
func (m *GenerateNumberReq) String() string            { return proto.CompactTextString(m) }
func (*GenerateNumberReq) ProtoMessage()               {}
func (*GenerateNumberReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GenerateNumberReq) GetMin() int32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *GenerateNumberReq) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

// GenerateNumberResp contains reults of number generation
type GenerateNumberResp struct {
	Number int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *GenerateNumberResp) Reset()                    { *m = GenerateNumberResp{} }
func (m *GenerateNumberResp) String() string            { return proto.CompactTextString(m) }
func (*GenerateNumberResp) ProtoMessage()               {}
func (*GenerateNumberResp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GenerateNumberResp) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterType((*GenerateNumberReq)(nil), "wordgen.GenerateNumberReq")
	proto.RegisterType((*GenerateNumberResp)(nil), "wordgen.GenerateNumberResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NumberGenerator service

type NumberGeneratorClient interface {
	// GenerateNumber generates random number
	GenerateNumber(ctx context.Context, in *GenerateNumberReq, opts ...grpc.CallOption) (*GenerateNumberResp, error)
}

type numberGeneratorClient struct {
	cc *grpc.ClientConn
}

func NewNumberGeneratorClient(cc *grpc.ClientConn) NumberGeneratorClient {
	return &numberGeneratorClient{cc}
}

func (c *numberGeneratorClient) GenerateNumber(ctx context.Context, in *GenerateNumberReq, opts ...grpc.CallOption) (*GenerateNumberResp, error) {
	out := new(GenerateNumberResp)
	err := grpc.Invoke(ctx, "/wordgen.NumberGenerator/GenerateNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NumberGenerator service

type NumberGeneratorServer interface {
	// GenerateNumber generates random number
	GenerateNumber(context.Context, *GenerateNumberReq) (*GenerateNumberResp, error)
}

func RegisterNumberGeneratorServer(s *grpc.Server, srv NumberGeneratorServer) {
	s.RegisterService(&_NumberGenerator_serviceDesc, srv)
}

func _NumberGenerator_GenerateNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberGeneratorServer).GenerateNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordgen.NumberGenerator/GenerateNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberGeneratorServer).GenerateNumber(ctx, req.(*GenerateNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _NumberGenerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wordgen.NumberGenerator",
	HandlerType: (*NumberGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateNumber",
			Handler:    _NumberGenerator_GenerateNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wordgen/number.proto",
}

func init() { proto.RegisterFile("wordgen/number.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0xcf, 0x2f, 0x4a,
	0x49, 0x4f, 0xcd, 0xd3, 0xcf, 0x2b, 0xcd, 0x4d, 0x4a, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x87, 0x8a, 0x2a, 0x99, 0x73, 0x09, 0xba, 0xa7, 0xe6, 0xa5, 0x16, 0x25, 0x96, 0xa4,
	0xfa, 0x81, 0x15, 0x04, 0xa5, 0x16, 0x0a, 0x09, 0x70, 0x31, 0xe7, 0x66, 0xe6, 0x49, 0x30, 0x2a,
	0x30, 0x6a, 0xb0, 0x06, 0x81, 0x98, 0x60, 0x91, 0xc4, 0x0a, 0x09, 0x26, 0xa8, 0x48, 0x62, 0x85,
	0x92, 0x0e, 0x97, 0x10, 0xba, 0xc6, 0xe2, 0x02, 0x21, 0x31, 0x2e, 0x36, 0x88, 0x3d, 0x50, 0xcd,
	0x50, 0x9e, 0x51, 0x1c, 0x17, 0x3f, 0x44, 0x15, 0x54, 0x4f, 0x7e, 0x91, 0x90, 0x37, 0x17, 0x1f,
	0xaa, 0x01, 0x42, 0x52, 0x7a, 0x50, 0x57, 0xe9, 0x61, 0x38, 0x49, 0x4a, 0x1a, 0xa7, 0x5c, 0x71,
	0x81, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x5b, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x1c,
	0x3b, 0xff, 0xee, 0x00, 0x00, 0x00,
}
